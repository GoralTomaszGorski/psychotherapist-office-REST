plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'
}

group = 'pl.goral'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql:42.7.4'
    implementation 'org.liquibase:liquibase-core'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    implementation 'org.mapstruct:mapstruct:1.6.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'com.sun.mail:jakarta.mail:2.0.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.springframework.security:spring-security-test'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.all {
    resolutionStrategy {
        force 'org.springframework:spring-web:6.2.8'
        force 'org.springframework:spring-webmvc:6.2.8'
        force 'org.springframework:spring-core:6.2.8'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(21)
    options.compilerArgs.addAll(['-Xlint:deprecation'])
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
}

/* JaCoCo configuration */
jacoco {
    toolVersion = "0.8.10"
}

// Konfigurujemy istniejące zadania typu JacocoReport (w tym domyślny jacocoTestReport)
tasks.withType(org.gradle.testing.jacoco.tasks.JacocoReport).configureEach {
    dependsOn tasks.test

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }

    // źródła/klasy
    def ss = project.sourceSets

    // executionData - pliki .exec generowane przez testy
    executionData.setFrom(fileTree(dir: "${buildDir}", includes: [
            "jacoco/*.exec",
            "**/jacoco/*.exec",
            "**/test.exec",
            "**/*.exec"
    ]))

    classDirectories.setFrom(files(ss.main.output))
    sourceDirectories.setFrom(files(ss.main.allSource.srcDirs))
}